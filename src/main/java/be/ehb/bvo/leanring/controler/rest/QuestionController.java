package be.ehb.bvo.leanring.controler.rest;

import be.ehb.bvo.leanring.controller.ui.UserRegistrationController;
import be.ehb.bvo.leanring.model.ListQuestion;
import be.ehb.bvo.leanring.model.QuestionSeries;
import be.ehb.bvo.leanring.model.User;
import be.ehb.bvo.leanring.repo.QuestionRepository;
import be.ehb.bvo.leanring.repo.QuestionSeriesRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController // This means that this class is a Controller
@RequestMapping(path="/questionseries") // This means URL's start with /demo (after Application path)
public class QuestionController {
//  @Autowired // This means to get the bean called userRepository
//         // Which is auto-generated by Spring, we will use it to handle the data
//  private UserRepository userRepository;

  private static final Logger logger = LoggerFactory.getLogger(QuestionController.class);

  @Autowired
  private QuestionRepository questionRepo;

  @Autowired
  private QuestionSeriesRepository questionSeriesRepo;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewQuestion (@RequestBody ListQuestion question) {
    questionRepo.save(question);
    return "Saved";
  }

  @GetMapping(path="/")
  public @ResponseBody Iterable<QuestionSeries> getAllQuestionsSeries() {
    return questionSeriesRepo.findAll();
  }

  @PostMapping(path="/")
  public @ResponseBody String addNewSeries (@RequestBody QuestionSeries series) {
    questionSeriesRepo.save(series);
    return "Saved";
  }

  @GetMapping(path="/{id}")
  public @ResponseBody QuestionSeries getASeries(@PathVariable Integer id) {
    return questionSeriesRepo.findById(id)
            .orElseThrow(() -> new RuntimeException("id " + id +  " not found"));
  }

  @GetMapping(path="/{id}/questions")
  public @ResponseBody Iterable<ListQuestion> getQuestionsForSeries(@PathVariable Integer id) {
    return questionSeriesRepo.findById(id)
            .orElseThrow(() -> new RuntimeException("id " + id +  " not found"))
            .getQuestions();
  }


  /*
  curl -i \
-H "Accept: application/json" \
-H "Content-Type:application/json" \
-X POST --data '{"question": "What is my name?", "answers": ["Bart","Voet"]}' "http://localhost:8080/questionseries/1/questions"
   */

  @PostMapping(path="/{id}/questions")
  public @ResponseBody String addNewQuestion (@PathVariable Integer id, @RequestBody ListQuestion question) {
    QuestionSeries series = questionSeriesRepo.findById(id)
            .orElseThrow(() -> new RuntimeException("id " + id +  " not found"));
    series.addQuestion(question);
    questionSeriesRepo.save(series);
    return "Saved";
  }
}